version: "3.8"

services:
    app:
        build:
            context: .
            dockerfile: Dockerfile
        ports:
            - "8000:9000"
        volumes:
            - .:/var/www/1000proxy
            - ./storage:/var/www/1000proxy/storage
            - ./bootstrap/cache:/var/www/1000proxy/bootstrap/cache
        # The app service uses both .env.production and .env files for environment variables.
        # Note: The comment about Redis ignoring these files applies only to the Redis service below.
        env_file:
            - .env.production
            - .env
        depends_on:
            mysql:
                condition: service_healthy
            redis:
                condition: service_healthy
        networks:
            - proxy-network
        healthcheck:
            test: ["CMD-SHELL", "pgrep -f 'php-fpm' || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    nginx:
        image: nginx:alpine
        ports:
            - "80:80"
            - "443:443"
        volumes:
            # Mount Nginx config as read-only for security and maintainability
            - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
            - /var/www/1000proxy/public:/var/www/1000proxy/public:ro
            # Mount SSL certificate and key
            - ./docker/nginx/certs:/etc/nginx/certs:ro
        depends_on:
            app:
                condition: service_healthy
        networks:
            - proxy-network

    mysql:
        image: mysql:8.0
        ports:
            - "3306:3306"
        environment:
            MYSQL_ROOT_PASSWORD: Dat@1000proxy
            MYSQL_DATABASE: 1000proxy
            MYSQL_USER: 1000proxy
            MYSQL_PASSWORD: Dat@1000proxy
        volumes:
            - mysql_data:/var/lib/mysql
            - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro
        networks:
            - proxy-network
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
            interval: 20s
            timeout: 10s
            retries: 5
            start_period: 30s

        # ...existing code...
    redis:
        command: sh -c 'if [ -z "${REDIS_PASSWORD}" ]; then echo "REDIS_PASSWORD is not set! Exiting."; exit 1; fi; redis-server /etc/redis/redis.conf'
        image: redis:7-alpine
        volumes:
            - redis_data:/data
            - ./docker/redis/redis.conf:/etc/redis/redis.conf
        env_file:
            - .env.production
            - .env
        networks:
            - proxy-network
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    '[ -z "$REDIS_PASSWORD" ] && redis-cli ping || redis-cli -a "$REDIS_PASSWORD" ping',
                ]
            interval: 20s
            timeout: 10s
            start_period: 20s

    horizon:
        build:
            context: .
            dockerfile: Dockerfile
        volumes:
            - .:/var/www/1000proxy
            - ./storage:/var/www/1000proxy/storage
        depends_on:
            mysql:
                condition: service_healthy
            redis:
                condition: service_healthy
        env_file:
            - .env.production
            - .env
        networks:
            - proxy-network
        command: php artisan horizon
        restart: unless-stopped
        healthcheck:
            test: ["CMD-SHELL", "pgrep -f 'artisan horizon' || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    scheduler:
        build:
            context: .
            dockerfile: Dockerfile
        volumes:
            - .:/var/www/1000proxy
            - ./storage:/var/www/1000proxy/storage
        depends_on:
            mysql:
                condition: service_healthy
            redis:
                condition: service_healthy
        env_file:
            - .env.production
            - .env
        command: ["sh", "/var/www/1000proxy/docker/scheduler/loop.sh"]
        restart: unless-stopped
        healthcheck:
            test: ["CMD-SHELL", "pgrep -f 'loop.sh' || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    # tdlib-gateway:
    #     image: ghcr.io/your-org/tdlib-gateway:latest
    #     environment:
    #         - TDLIB_API_ID=${TELEGRAM_API_ID}
    #         - TDLIB_API_HASH=${TELEGRAM_API_HASH}
    #         - BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
    #         - GATEWAY_KEY=${TDLIB_GATEWAY_KEY:-${APP_KEY}}
    #     volumes:
    #         - ./storage/tdlib:/data
    #     networks:
    #         - proxy-network
    #     healthcheck:
    #         test: ["CMD", "wget", "-qO-", "http://localhost:8080/health"]
    #         interval: 30s
    #         timeout: 5s
    #         retries: 5
    #         start_period: 30s

    mailhog:
        image: mailhog/mailhog:latest
        ports:
            - "1025:1025"
            - "8025:8025"
        networks:
            - proxy-network

volumes:
    mysql_data:
        driver: local
    redis_data:
        driver: local

networks:
    proxy-network:
        driver: bridge
