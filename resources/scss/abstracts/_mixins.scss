// ==========================================================================
// MIXINS - Reusable SCSS mixins for the 1000proxy platform
// ==========================================================================

// RESPONSIVE BREAKPOINTS
// ==========================================================================
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Breakpoint '#{$breakpoint}' not found in $breakpoints map.";
  }
}

@mixin respond-below($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (max-width: #{map-get($breakpoints, $breakpoint) - 1px}) {
      @content;
    }
  } @else {
    @warn "Breakpoint '#{$breakpoint}' not found in $breakpoints map.";
  }
}

@mixin respond-between($min-breakpoint, $max-breakpoint) {
  @if map-has-key($breakpoints, $min-breakpoint) and map-has-key($breakpoints, $max-breakpoint) {
    @media (min-width: map-get($breakpoints, $min-breakpoint)) and (max-width: #{map-get($breakpoints, $max-breakpoint) - 1px}) {
      @content;
    }
  } @else {
    @warn "One or both breakpoints not found in $breakpoints map.";
  }
}

// SPACING UTILITIES
// ==========================================================================
@mixin spacing($property, $size, $direction: null) {
  @if map-has-key($spacing-scale, $size) {
    $value: map-get($spacing-scale, $size);

    @if $direction == null {
      #{$property}: $value;
    } @else if $direction == 'x' {
      #{$property}-left: $value;
      #{$property}-right: $value;
    } @else if $direction == 'y' {
      #{$property}-top: $value;
      #{$property}-bottom: $value;
    } @else if $direction == 't' or $direction == 'top' {
      #{$property}-top: $value;
    } @else if $direction == 'r' or $direction == 'right' {
      #{$property}-right: $value;
    } @else if $direction == 'b' or $direction == 'bottom' {
      #{$property}-bottom: $value;
    } @else if $direction == 'l' or $direction == 'left' {
      #{$property}-left: $value;
    }
  } @else {
    @warn "Spacing size '#{$size}' not found in $spacing-scale map.";
  }
}

// BUTTON MIXINS
// ==========================================================================
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border: none;
  border-radius: $button-border-radius;
  font-weight: map-get($font-weights, 'medium');
  text-decoration: none;
  cursor: pointer;
  transition: $button-transition;
  white-space: nowrap;
  user-select: none;

  &:focus {
    outline: 2px solid var(--color-primary-500);
    outline-offset: 2px;
  }

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none;
  }
}

@mixin button-size($size) {
  @if map-has-key($button-sizes, $size) {
    $config: map-get($button-sizes, $size);
    padding: map-get($config, 'padding');
    font-size: map-get($config, 'font-size');
    line-height: map-get($config, 'line-height');
  } @else {
    @warn "Button size '#{$size}' not found in $button-sizes map.";
  }
}

@mixin button-variant($bg-color, $text-color, $hover-bg: null, $hover-text: null) {
  background-color: $bg-color;
  color: $text-color;

  &:hover:not(:disabled) {
    background-color: $hover-bg or darken($bg-color, 10%);
    color: $hover-text or $text-color;
    transform: translateY(-1px);
    box-shadow: map-get($shadows, 'md');
  }

  &:active:not(:disabled) {
    transform: translateY(0);
    box-shadow: map-get($shadows, 'sm');
  }
}

// CARD MIXINS
// ==========================================================================
@mixin card-base {
  background: white;
  border-radius: $card-border-radius;
  box-shadow: $card-shadow;
  padding: $card-padding;
  transition: all map-get($transition-durations, 'base') map-get($transition-easings, 'smooth');

  [data-theme="dark"] & {
    background: var(--color-bg-secondary);
    border: 1px solid var(--color-border-primary);
  }
}

@mixin card-hover {
  &:hover {
    transform: translateY(-2px);
    box-shadow: map-get($shadows, 'lg');
  }
}

@mixin card-interactive {
  cursor: pointer;
  @include card-hover;

  &:active {
    transform: translateY(0);
    box-shadow: $card-shadow;
  }
}

// GLASSMORPHISM EFFECTS
// ==========================================================================
@mixin glassmorphism($opacity: 0.1, $blur: 20px) {
  background: rgba(255, 255, 255, $opacity);
  backdrop-filter: blur($blur);
  -webkit-backdrop-filter: blur($blur);
  border: 1px solid rgba(255, 255, 255, 0.2);

  [data-theme="dark"] & {
    background: rgba(0, 0, 0, $opacity);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
}

// GRADIENT MIXINS
// ==========================================================================
@mixin gradient-primary {
  background: linear-gradient(135deg, var(--color-primary-500), var(--color-primary-600));
}

@mixin gradient-secondary {
  background: linear-gradient(135deg, var(--color-secondary-500), var(--color-secondary-600));
}

@mixin gradient-text($gradient) {
  background: $gradient;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

// LOADING ANIMATIONS
// ==========================================================================
@mixin loading-skeleton {
  background: linear-gradient(
    90deg,
    rgba(203, 213, 225, 0.1) 25%,
    rgba(203, 213, 225, 0.3) 50%,
    rgba(203, 213, 225, 0.1) 75%
  );
  background-size: 200% 100%;
  animation: skeleton-loading 1.5s ease-in-out infinite;

  [data-theme="dark"] & {
    background: linear-gradient(
      90deg,
      rgba(71, 85, 105, 0.1) 25%,
      rgba(71, 85, 105, 0.3) 50%,
      rgba(71, 85, 105, 0.1) 75%
    );
    background-size: 200% 100%;
  }
}

@mixin loading-spinner($size: 24px, $border-width: 2px, $color: var(--color-primary-500)) {
  width: $size;
  height: $size;
  border: $border-width solid rgba($color, 0.2);
  border-top: $border-width solid $color;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

// STATUS INDICATORS
// ==========================================================================
@mixin status-indicator($status) {
  $color: var(--color-status-unknown);

  @if $status == 'online' {
    $color: var(--color-status-online);
  } @else if $status == 'offline' {
    $color: var(--color-status-offline);
  } @else if $status == 'warning' {
    $color: var(--color-status-warning);
  }

  &::before {
    content: '';
    display: inline-block;
    width: 8px;
    height: 8px;
    background-color: $color;
    border-radius: 50%;
    margin-right: 8px;
    animation: status-pulse 2s infinite;
  }
}

@mixin status-badge($status) {
  $bg-color: var(--color-status-unknown);
  $text-color: white;

  @if $status == 'online' {
    $bg-color: var(--color-status-online);
  } @else if $status == 'offline' {
    $bg-color: var(--color-status-offline);
  } @else if $status == 'warning' {
    $bg-color: var(--color-status-warning);
  }

  background-color: $bg-color;
  color: $text-color;
  padding: 0.25rem 0.5rem;
  border-radius: map-get($border-radius, 'base');
  font-size: map-get($font-sizes, 'xs');
  font-weight: map-get($font-weights, 'medium');
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

// FORM MIXINS
// ==========================================================================
@mixin form-input {
  width: 100%;
  padding: 0.75rem 1rem;
  border: 1px solid #d1d5db;
  border-radius: $form-border-radius;
  font-size: map-get($font-sizes, 'base');
  transition: $form-transition;

  &:focus {
    outline: none;
    border-color: var(--color-primary-500);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  &:disabled {
    background-color: #f9fafb;
    cursor: not-allowed;
  }

  [data-theme="dark"] & {
    background: var(--color-bg-secondary);
    border-color: var(--color-border-primary);
    color: var(--color-text-primary);

    &:focus {
      border-color: var(--color-primary-400);
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
    }

    &:disabled {
      background-color: var(--color-bg-tertiary);
    }
  }
}

@mixin form-label {
  display: block;
  font-size: map-get($font-sizes, 'sm');
  font-weight: map-get($font-weights, 'medium');
  color: #374151;
  margin-bottom: 0.5rem;

  [data-theme="dark"] & {
    color: var(--color-text-secondary);
  }
}

// UTILITY MIXINS
// ==========================================================================
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin line-clamp($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
